package com.ja.freeboard.Model;

import java.sql.*;
import java.util.*;
import java.util.Date;

import com.ja.freeboard.vo.*;
/*
 * DAO란?
 * 데이터베이스와 1:1로 연동되서 데이터베이스에 
 * 어떠한 내용을 기록하고 다시 역으로 데이터베이스에서 내용을 가져오는 역할
 * 데이터 접근 객체
 * 데이터 베이스에 직접 접근한다
 */
public class MemberDao {
	//DB연동 정보 / 멤버 변수로만듬
	private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe"; //필터 연동
	private static final String USER = "SCOTT";
	private static final String PASSWORD = "TIGER";
		
	//insert할때 필요한 값은 이 네가지
	public void insert(String m_id, String m_pw, String m_nick, String m_phone) {
		String query="INSERT INTO FB_MEMBER VALUES(FB_MEMBER_SEQ.NEXTVAL, ?, ?, ?, ?, SYSDATE)";
		
		Connection conn = null;
		PreparedStatement pstm = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver"); //코드가 한번이라도 사용이 되야 사용가능하다
			conn = DriverManager.getConnection(URL, USER, PASSWORD); //데이터베이스 연동 프로토콜, TCP/IP를 잡아서 연동시켜줌
			pstm = conn.prepareStatement(query);
			pstm.setString(1, m_id);
			pstm.setString(2, m_pw);
			pstm.setString(3, m_nick);
			pstm.setString(4, m_phone);
			pstm.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if(pstm != null) {
				try {
					pstm.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			if(conn != null) {
				try {
					conn.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}
	}
	//Method 생성
	//데이터를 받아와서 리턴시켜줌
	//select하는 역할까지만 이 메소드의 역할이다. 출력은 다른 곳에서
	//리턴타입은 MemberVo
	public MemberVo selectByIdAndPw(String id, String pw) {
		
		MemberVo memberVo = null;
		//''빼고 ? 넣어야함 / 값에만 ? 넣을 수 있다
		String query = "SELECT * FROM FB_MEMBER WHERE MEMBER_ID = ? AND MEMBER_PW = ?";
		
		Connection conn = null;
		PreparedStatement pstm = null;
		//select 할때는 ResultSet 필요
		ResultSet rs = null;
				
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver"); // 한번 로드
			conn = DriverManager.getConnection(URL, USER, PASSWORD); //데이터 베이스 접속
			pstm = conn.prepareStatement(query); //물음표가 들어간 쿼리를 컴파일함
			pstm.setString(1, id);
			pstm.setString(2, pw);
			//SQL 실행시키는 API
			//리턴타입이 ResultSet이여서 rs에 넣어줌
			rs = pstm.executeQuery();
			
			//로직...
			//결과값이 
			//리턴 null할거기 때문에 else 필요없음
			if(rs.next()) {
				int m_no = rs.getInt("member_no");
				String m_id = rs.getString("member_id");
				String m_pw = rs.getString("member_pw");
				String m_nick = rs.getString("member_nick");
				String m_phone = rs.getString("member_phone");
				Date m_joindate = rs.getDate("member_joindate"); //다형성이 적용됨 getDate는 Date의 상속 관계
				
				//리턴타입 import java.util과 java.sql 주의 
				//java.sql이 java.util의 상속을 받고 있는거 주의할것
				//null로 사용해도 된다. / MemberVo에 필요한 값만 constructor로 뽑는 것도 가능
				//memberVo = new MemberVo(m_no,m_id,m_pw,m_nick,null,m_joindate);
				memberVo = new MemberVo(m_no,m_id,m_pw,m_nick,m_phone,m_joindate); //null값이 아닌 이것의 주소값이 넘어감
				
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if(rs != null) {
				try {
					rs.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			if(pstm != null) {
				try {
					pstm.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			if(conn != null) {
				try {
					conn.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		//memberVo 리턴해줌
		return memberVo;
	}
	
	public MemberVo selectByNo(int no) {
		MemberVo memberVo = null;
		
		String query = "SELECT * FROM FB_MEMBER WHERE MEMBER_NO = ?";
		
		Connection conn = null;
		PreparedStatement pstm = null;
		//select 할때는 ResultSet 필요
		ResultSet rs = null;
				
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver"); // 한번 로드
			conn = DriverManager.getConnection(URL, USER, PASSWORD); //데이터 베이스 접속
			pstm = conn.prepareStatement(query); //물음표가 들어간 쿼리를 컴파일함
			pstm.setInt(1, no);
			//SQL 실행시키는 API
			//리턴타입이 ResultSet이여서 rs에 넣어줌
			rs = pstm.executeQuery();
			
			//로직...
			//결과값이 
			//리턴 null할거기 때문에 else 필요없음
			if(rs.next()) {
				int m_no = rs.getInt("member_no");
				String m_id = rs.getString("member_id");
				String m_pw = rs.getString("member_pw");
				String m_nick = rs.getString("member_nick");
				String m_phone = rs.getString("member_phone");
				Date m_joindate = rs.getDate("member_joindate"); //다형성이 적용됨 getDate는 Date의 상속 관계
				
				//리턴타입 import java.util과 java.sql 주의 
				//java.sql이 java.util의 상속을 받고 있는거 주의할것
				memberVo = new MemberVo(m_no,m_id,m_pw,m_nick,m_phone,m_joindate); //null값이 아닌 이것의 주소값이 넘어감 / 데이터를 묶어서 출력
				
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if(rs != null) {
				try {
					rs.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			if(pstm != null) {
				try {
					pstm.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			if(conn != null) {
				try {
					conn.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		return memberVo;
	}
	
	
	
}
















